{
  "hash": "7ab0e27917feb1fdc795a9e6f47468c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"My Publications\"\nformat: html\nengine: knitr\nexecute:\n  echo: false\n  results: asis\n---\n\nsuppressPackageStartupMessages({\n  library(dplyr)\n  library(stringr)\n  library(bibtex)\n  library(purrr)\n})\n\n# Function to clean and validate bib file\nclean_bib_file <- function(file_path) {\n  if (!file.exists(file_path)) {\n    stop(\"Bib file not found: \", file_path)\n  }\n  \n  # Read raw content\n  raw_lines <- readLines(file_path, warn = FALSE)\n  \n  # Remove empty lines\n  raw_lines <- raw_lines[trimws(raw_lines) != \"\"]\n  \n  # Basic validation and cleaning\n  cleaned_lines <- raw_lines\n  \n  # Ensure entries start with @\n  entry_starts <- grep(\"^@\", cleaned_lines)\n  if (length(entry_starts) == 0) {\n    stop(\"No valid BibTeX entries found\")\n  }\n  \n  return(cleaned_lines)\n}\n\n# Try to read bibliography with error handling\ntryCatch({\n  # First try to clean the file\n  cleaned_content <- clean_bib_file(\"manuscripts.bib\")\n  \n  # Write cleaned content to temporary file\n  temp_file <- tempfile(fileext = \".bib\")\n  writeLines(cleaned_content, temp_file)\n  \n  # Read the cleaned file\n  biblio <- bibtex::read.bib(temp_file)\n  \n  # Clean up temp file\n  unlink(temp_file)\n  \n  # Sort by year (descending)\n  biblio <- biblio[order(purrr::map_int(biblio, ~ as.integer(.x$year)), decreasing = TRUE)]\n  \n  # Format and display entries\n  format_entry <- function(entry) {\n    # Extract key information\n    title <- entry$title %||% \"No title\"\n    authors <- if(length(entry$author) > 0) paste(entry$author, collapse = \", \") else \"No authors\"\n    journal <- entry$journal %||% entry$booktitle %||% \"No journal\"\n    year <- entry$year %||% \"No year\"\n    volume <- entry$volume %||% \"\"\n    number <- entry$number %||% \"\"\n    pages <- entry$pages %||% \"\"\n    \n    # Clean up title\n    title <- gsub(\"[{}]\", \"\", title)\n    \n    # Build citation\n    citation <- paste0(\"<strong>\", title, \"</strong><br>\")\n    citation <- paste0(citation, \"<em>\", authors, \"</em><br>\")\n    \n    # Journal info\n    journal_info <- journal\n    if (volume != \"\") journal_info <- paste0(journal_info, \" \", volume)\n    if (number != \"\") journal_info <- paste0(journal_info, \"(\", number, \")\")\n    if (pages != \"\") journal_info <- paste0(journal_info, \": \", pages)\n    if (year != \"\") journal_info <- paste0(journal_info, \" (\", year, \")\")\n    \n    citation <- paste0(citation, journal_info)\n    \n    # Wrap in styled div\n    paste0('<div style=\"margin-bottom: 1.5em; padding: 1em; border-left: 4px solid #0066cc; background-color: #f8f9fa;\">',\n           citation,\n           '</div>')\n  }\n  \n  # Format all entries\n  formatted_entries <- purrr::map_chr(biblio, format_entry)\n  \n  # Output\n  cat(\"## Publications\\n\\n\")\n  cat(paste(formatted_entries, collapse = \"\\n\\n\"))\n  \n  # Add summary\n  cat(\"\\n\\n---\\n\\n\")\n  cat(\"**Total publications:** \", length(biblio), \"\\n\\n\")\n  \n  # Years summary\n  years <- purrr::map_chr(biblio, ~ .x$year %||% \"Unknown\")\n  years_numeric <- as.numeric(years[years != \"Unknown\"])\n  if (length(years_numeric) > 0) {\n    cat(\"**Publication years:** \", min(years_numeric), \" - \", max(years_numeric), \"\\n\\n\")\n  }\n  \n}, error = function(e) {\n  cat(\"## Error Reading Bibliography\\n\\n\")\n  cat(\"There was an error reading your manuscripts.bib file:\\n\\n\")\n  cat(\"```\\n\")\n  cat(as.character(e), \"\\n\")\n  cat(\"```\\n\\n\")\n  cat(\"Please check your .bib file format. Common issues include:\\n\")\n  cat(\"- Missing opening braces after entry type (e.g., `@article{key,`)\\n\")\n  cat(\"- Missing commas between fields\\n\")\n  cat(\"- Unbalanced braces `{}`\\n\")\n  cat(\"- Invalid characters in entry keys\\n\")\n})",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}